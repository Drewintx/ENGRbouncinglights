#include <Adafruit_CircuitPlayground.h>

// this is setting variables for the speech function
const uint8_t spONE[]               PROGMEM ={0xA6,0xA5,0x36,0xDF,0x89,0xEC,0xA5,0x86,0xDB,0xF9,0x42,0x56,0x9A,0x2A,0xE1,0xFB,0x0B,0x38,0x7D,0x6F,0x46,0x63,0x7C,0x9D,0x62,0x25,0x9E,0xCD,0x28,0x5C,0xAC,0x32,0xEA,0x38,0xBB,0x1A,0x4D,0x88,0x56,0x2A,0x53,0x67,0x76,0x79,0x70,0x83,0xF3,0x94,0x6C,0xE9,0xD6,0x0C,0xCE,0x61,0x8A,0xB4,0x3B,0x36,0xCA,0x20,0x1A,0xDC,0xAD,0xCD,0x28,0x8D,0x78,0x7B,0x5B,0x26,0x93,0x10,0x6A,0x95,0x9E,0xDA,0x4C,0x25,0x85,0x9A,0x5A,0x9A,0x07};
const uint8_t spTWO[]               PROGMEM ={0x02,0xD8,0x51,0x3C,0x00,0xC7,0x7A,0x18,0x20,0x85,0xE2,0xE5,0x16,0x61,0x45,0x65,0xD9,0x6F,0xBC,0xE3,0x99,0xB4,0x34,0x51,0x6B,0x49,0xC9,0xDE,0xAB,0x56,0x3B,0x11,0xA9,0x2E,0xD9,0x73,0xEB,0x7A,0x69,0x2A,0xCD,0xB5,0x9B,0x1A,0x58,0x2A,0x73,0xF3,0xCD,0x6A,0x90,0x62,0x8A,0xD3,0xD3,0xAA,0x41,0xF1,0x4E,0x77,0x75,0xF2};
const uint8_t spTHREE[]             PROGMEM ={0x0C,0x08,0xCA,0x44,0x02,0x1A,0xB0,0x40,0xC8,0x4D,0x15,0x73,0xCB,0xB4,0x39,0x0F,0xB9,0xE9,0x14,0xE6,0xAD,0xBE,0xE4,0x7E,0x50,0x50,0xA9,0xDF,0x91,0xE5,0x25,0x05,0x21,0x79,0x47,0x5E,0x7A,0x18,0x09,0xBD,0x5F,0x45,0xCB,0xC1,0xA8,0xF6,0x76,0x56,0xAD,0x2D,0x41,0x98,0xB3,0xEF,0xD4,0x2E,0x0C,0x5E,0x89,0xE5,0x66,0x65,0x3F,0xB8,0xC1,0x6B,0xF2,0x9A,0x0E,0x63,0x46,0xAF,0x38,0xAB,0x53,0xCC,0x03};
const uint8_t spFOUR[]              PROGMEM ={0xC0,0x00,0x23,0x2D,0x24,0xA0,0x01,0x0B,0x58,0x20,0xC5,0xBC,0xF7,0x11,0x4C,0x9A,0x9A,0xA4,0x84,0xF6,0x39,0x85,0x6E,0x97,0x93,0x98,0x84,0x8C,0xF5,0x5E,0x45,0xCD,0xDE,0x2A,0x91,0x63,0xD2,0x58,0x7D,0x6B,0x55,0xB1,0xF2,0x26,0xED,0xA9,0xE7,0xDB,0xC2,0x4B,0xFC,0xBA,0x49,0x2E,0x89,0x55,0xF4,0xE3,0x66,0xB5,0x95,0xAB,0xCC,0xBB,0x9B,0xED,0x30,0xF6,0x11,0x35,0x76,0x7B,0x00,0x00};
const uint8_t spFIVE[]              PROGMEM ={0xC0,0x80,0xE8,0xCD,0x46,0xEE,0x9C,0x6F,0x31,0x66,0x39,0xB9,0xF3,0x35,0x45,0xD6,0xF4,0x64,0xDE,0x77,0x27,0x79,0xDD,0x93,0x7A,0xDF,0x1D,0x14,0x45,0x4E,0xE6,0x43,0x97,0x73,0x05,0x3D,0x45,0x08,0x5D,0xC5,0x15,0xE5,0x54,0x21,0x56,0x06,0x67,0x90,0x53,0xC7,0x54,0x15,0x14,0x75,0x4F,0x1B,0xAB,0x17,0x43,0x25,0x59,0x5D,0x6C,0x5E,0xAA,0x59,0x75,0xF4,0xA9,0x59,0x69,0xD5,0xD4,0xD1,0xC7,0x6A,0xA1,0x5E,0x53,0xDB,0x10,0x8B,0x86,0x46,0x5D,0x6D,0x43,0x28,0x1A,0x1A,0x35,0xB4,0xF4,0x2E,0x4B,0xA9,0x75,0x62,0x33,0x98,0xA2,0xC6,0x5A,0x09,0xD9,0x20,0x95,0x7B,0x99,0xBB,0x06,0x04,0x38,0x27,0x84,0x00,0xE5,0xD5,0x1F};
const uint8_t spSIX[]               PROGMEM ={0x06,0x98,0xB6,0xC4,0x01,0x2F,0x66,0x46,0x20,0x01,0xD3,0x96,0x18,0x40,0x04,0xAF,0x96,0xA4,0x60,0xA1,0x52,0x8B,0x6F,0xB2,0x92,0x58,0xC4,0xC5,0x67,0xC9,0x4E,0x46,0x95,0x9A,0xB8,0x44,0x2D,0x76,0x7D,0x48,0xD8,0x13,0x15,0x03,0x00,0x10,0x60,0xA2,0x8B,0x00,0x8E,0xAD,0x52,0xC0,0xCF,0x9E,0x1A,0x10,0xC0,0x8F,0xE6,0x0F,0x00,0x00};
const uint8_t spSEVEN[]             PROGMEM ={0x0C,0xF8,0xDE,0x4C,0x02,0x1A,0xD0,0x80,0x05,0x2C,0xB0,0x62,0x17,0x2D,0x43,0x2B,0xF1,0x4D,0x6E,0xB2,0xD3,0x92,0x19,0x1F,0x6E,0xEC,0x51,0x5C,0xE5,0xB9,0x5A,0x58,0x3A,0x76,0x95,0xF7,0x9E,0x1E,0x30,0xAF,0x77,0x65,0xB2,0x29,0x42,0x2C,0xA6,0xB8,0xD9,0x64,0xCD,0x90,0x8A,0xE5,0x66,0x13,0x38,0x8C,0xD3,0x9D,0x58,0xB4,0x17,0x1B,0x29,0xF7,0x62,0x31,0x5E,0xC5,0x24,0xD3,0x88,0xCD,0x79,0xD6,0x90,0x71,0xF7};
const uint8_t spEIGHT[]             PROGMEM ={0x2D,0x2F,0xC5,0x54,0xA3,0x63,0xB5,0xBC,0x54,0x55,0xCD,0x1E,0x32,0xB2,0x5A,0x85,0xB8,0xBA,0xCE,0xCE,0x66,0x36,0x8B,0x56,0xD5,0x22,0xC8,0x55,0x73,0x63,0x2F,0x07,0x00,0x00,0x02,0x44,0x6D,0xCA,0x01,0x04,0x18,0x21,0x86,0x81,0x07};
const uint8_t spNINE[]              PROGMEM ={0x80,0x52,0xAA,0x32,0x2B,0xDA,0xB6,0xA9,0xAC,0x95,0x69,0xCD,0x48,0xAE,0xB1,0x5E,0xC7,0xAD,0x4D,0xAE,0x3A,0xBA,0x0C,0x51,0xAA,0x72,0xAA,0xE0,0x3B,0x25,0xB0,0xCD,0xA9,0x6C,0x9C,0x34,0xCD,0x2A,0x2B,0x77,0x61,0xD2,0x2C,0xEB,0x8C,0xDC,0xFB,0x49,0xD2,0x29,0x32,0x0A,0x17,0xC7,0xCD,0x22,0xEA,0xA9,0x62,0xA8,0x70,0xC9,0x7A,0xA7,0x4D,0x39,0x33,0x58,0x9B,0x8E,0x2E,0x76,0x0D,0xD5,0xA8,0xD3,0xFA,0xD0,0x43,0xB4,0x35,0x76,0x19,0x52,0x96,0xD0,0xCC,0xC8,0x65,0x88,0x43,0x45,0x23,0xAA,0xBA,0x31,0x0C,0x23,0xCD,0x18,0xC3,0x46,0x19,0x25,0x52,0xB3,0xA6,0x1A,0xB4,0xE3,0x48,0xA9,0x88,0x66,0x14,0x56,0x3D,0x22,0x1B,0x86,0xD1,0x29,0x37,0xCA,0x8C,0x0B,0x00,0xF0};
const uint8_t spTEN[]               PROGMEM ={0x0A,0xB0,0xDC,0xD4,0x01,0x83,0x86,0x28,0x20,0x85,0x10,0x01,0xB8,0x28,0x72,0xE2,0x34,0xCB,0x55,0xA2,0xEE,0x4D,0x6E,0x7A,0xB3,0x9B,0x9F,0x22,0x2E,0x77,0xF6,0x88,0x73,0xEB,0xDD,0xCE,0x2E,0x74,0xDE,0x42,0x4B,0x7A,0xA3,0xD8,0x85,0xDE,0x5B,0x18,0x89,0x4C,0xE9,0x7A,0x67,0xB0,0xC5,0x2B,0xA5,0xE9,0x95,0xE1,0x96,0xE8,0x84,0xAA,0xE7,0x4E,0xC3,0xEC,0x63,0x3F,0x00,0x00};
const uint8_t spELEVEN[]            PROGMEM ={0xA7,0x1E,0xC1,0x1C,0xC3,0xD6,0xDE,0xFA,0xD4,0xA9,0xA5,0xA1,0x45,0x9B,0xD5,0xC4,0x10,0xC6,0x94,0xE9,0x76,0xBD,0x6A,0xAF,0x2B,0xD9,0x37,0xEE,0xA9,0x42,0x4F,0x75,0xAB,0xB8,0xB7,0xB8,0xF9,0xCD,0x57,0xEE,0x53,0x89,0xBB,0xD7,0x73,0xAD,0x8D,0x2D,0x1E,0xDC,0x38,0xB7,0xBB,0x9D,0x7D,0x19,0x5C,0x49,0x29,0xD1,0x46,0x6E,0xB4,0x51,0x5D,0x49,0x9A,0xBA,0xC9,0x04,0x36,0xE7,0x4C,0xA2,0x66,0x13,0xC4,0x02,0x2B,0x91,0x98,0x6C,0x14,0x33,0xC9,0xC4,0x62,0x52,0xC1,0x34,0x24,0x52,0x3F};
const uint8_t spTWELVE[]            PROGMEM ={0x0C,0x70,0x33,0x5D,0x01,0xAE,0x64,0x84,0x80,0xD5,0x5E,0x11,0xDA,0x1A,0x93,0x95,0x9A,0x98,0x95,0xE4,0x6D,0x6F,0xBA,0xD3,0x9B,0xAE,0x5C,0xA7,0x49,0xC7,0x4A,0xB2,0x8B,0x5D,0xED,0x7A,0xD4,0x3A,0x4C,0x1B,0x59,0xE6,0x59,0xF7,0x26,0x35,0xDA,0x65,0x0B,0x4B,0x1C,0xD3,0x48,0x93,0x21,0x6A,0x6A,0x4B,0x9B,0x4D,0x98,0xA2,0xD9,0x51,0x80,0xB3,0xA9,0x0C,0x30,0x21,0x91,0x00,0xD2,0xA7,0x3E};
const uint8_t spTHIRTEEN[]          PROGMEM ={0x00,0x60,0x80,0xA6,0x42,0x18,0x60,0x4D,0xD8,0x8A,0x8C,0xCD,0x28,0xD3,0x46,0x27,0x31,0x21,0xBC,0x5A,0xFD,0xAE,0xD4,0xA4,0x90,0x18,0xF3,0x37,0x32,0x53,0x8D,0x63,0xCC,0x6F,0xC9,0xFC,0x56,0x16,0x0F,0xF7,0xA4,0x20,0x66,0x22,0x32,0x2D,0x01,0x10,0x40,0x0A,0xCF,0x04,0x54,0xA3,0x1C,0xFC,0x56,0x47,0x15,0x24,0xF1,0x4A,0x4A,0x72,0x21,0xCB,0xDB,0x23,0x49,0x5E,0xD8,0xBA,0x4A,0x8D,0xAC,0x19,0x65,0xAD,0x2C,0xD5,0x8A,0xE6,0x94,0xB4,0xB2,0xF4,0xA8,0x5B,0x50,0x94,0xC8,0x4A,0xAD,0x6B,0x4E,0x49,0x32,0x2B,0x97,0xBE,0x79,0x25,0xC9,0x2C,0x1D,0x86,0xEC,0x48,0x2C,0x2B,0x94,0x1B,0x83,0x21,0xF3,0x2E,0x29,0x6E,0xD4,0x46,0xAC,0xD3,0xA4,0xB8,0xD9,0x58,0x8C,0x09,0xB5,0x13,0xE6,0x94,0x21,0x4A,0x53,0x8E,0x5B,0x72,0x83,0x70,0x6F,0x25,0x76,0x81,0x07};
const uint8_t spFOURTEEN[]          PROGMEM ={0x00,0x04,0xF0,0xD2,0x54,0x01,0x49,0xB9,0x85,0x94,0xE5,0x6A,0x0F,0x93,0xDF,0x52,0x11,0xEB,0x99,0x39,0x73,0xCA,0xD8,0xA8,0xA3,0xD0,0xCE,0x25,0xE3,0x2B,0x52,0x5D,0xFB,0x8E,0xDC,0x24,0x37,0x1B,0x75,0xAF,0x00,0x1A,0xA4,0x81,0x00,0x95,0x92,0x03,0x80,0x03,0x8A,0x37,0xB6,0x80,0x00,0x8A,0x23,0x2D,0x41,0xD1,0x22,0xDE,0x59,0x6A,0x24,0x4D,0x0B,0x49,0x56,0xE5,0x91,0x0D,0x2D,0xC4,0x99,0x95,0x5B,0x3E,0xB4,0x30,0x57,0x55,0x2E,0x45,0xE7,0xC4,0x3A,0x19,0xB9,0xD4,0x85,0x13,0xC5,0x84,0x99,0xD4,0x54,0x4E,0xE2,0x17,0xA6,0x53,0xDB,0x34,0x8B,0x6F,0x98,0x49,0x5D,0xD6,0x2C,0x35,0x19,0x30,0x74,0x51,0x2B,0xFB,0x79,0x68,0xD1,0x33,0xAD,0xDD,0x1A,0xA6,0x45,0x4F,0xB4,0x56,0x4A,0xCB,0x16,0x3D,0xD3,0x3A,0x25,0x65,0x4A,0x74,0x5C,0xEB,0x8C,0x44,0x24,0xD1,0x49,0xAD,0xBD,0x1A,0x8E,0x1F,0x00,0x00};
const uint8_t spFIFTEEN[]           PROGMEM ={0x0A,0xE8,0x26,0xD4,0x02,0x27,0x2C,0x29,0x84,0xCD,0xDE,0xDC,0xE4,0xA6,0x35,0x8B,0xB9,0x01,0x8A,0x0A,0x54,0x40,0x91,0x1E,0x16,0x40,0x00,0xB2,0x15,0x00,0x0A,0x10,0xC6,0x7C,0xC4,0x3D,0x3A,0x43,0xF6,0x93,0x95,0x8C,0x64,0x0C,0x35,0x73,0x66,0x3A,0xB3,0x9E,0xB7,0x6A,0x34,0x13,0x88,0xBA,0xD3,0xEB,0xDE,0x86,0x2E,0x6B,0x96,0x9A,0x0C,0xE8,0x7B,0xD3,0x53,0x17,0x95,0x11,0xB6,0xEC,0x60,0x07,0x3D,0x88,0x81,0x6B,0x8B,0x96,0xB4,0xC5,0x06,0xA1,0xB4,0x56,0xC2,0xD1,0x03};
const uint8_t spLESS[]              PROGMEM ={0xA6,0x16,0xBA,0xDB,0x43,0x52,0x85,0xD6,0x88,0x2A,0x76,0x6D,0x53,0x5A,0xA7,0xD4,0xC3,0xA8,0x6B,0x6B,0x9C,0x31,0x2F,0x92,0xAE,0xA7,0x8E,0xC9,0x5B,0xAC,0xB6,0xDD,0xFA,0xD6,0xA7,0x4A,0x59,0x47,0xB8,0x52,0xDE,0xEA,0x14,0xB1,0x66,0xA3,0x66,0x92,0x52,0xB8,0x1C,0xCE,0x31,0xA1,0x15,0xF0,0x63,0xB8,0x07,0x0C,0xF0,0x83,0x87,0x07,0x02,0xF0,0x83,0x47,0x00,0x9E,0xC9,0x32,0xC0,0x51,0x96,0x04,0x70,0xB1,0x98,0x00,0x31,0x63,0xC2,0x03,0x00,0x00};
const uint8_t spI_WIN[]             PROGMEM ={0x29,0x09,0xDE,0x27,0x82,0xBB,0xF5,0x64,0x26,0x33,0x9D,0xE9,0x48,0x43,0xF6,0x72,0x8B,0xB6,0x35,0x2B,0x99,0x75,0x91,0xAE,0xB2,0x24,0x64,0xC2,0x77,0x99,0x52,0x2B,0x93,0x0B,0x3D,0xED,0x4A,0x2E,0x4D,0xA5,0xC4,0xAC,0x19,0x7A,0x4E,0x55,0xA0,0xB1,0xEA,0x98,0xB7,0x35,0x2D,0x98,0x71,0x51,0xBF,0xD9,0xAE,0xB6,0xC7,0x34,0x4A,0xD9,0xBB,0xBA,0x1E,0xD3,0x39,0xA4,0xEF,0xE8,0x6A,0x48,0xE7,0x90,0xED,0xAD,0x6F,0xAE,0x92,0x9D,0xBA,0xD4,0x3E,0x0D,0xD1,0x99,0x99,0x60,0x13,0x37,0x44,0x4F,0x21,0xEA,0xE9,0xCD,0x60,0xAD,0x26,0x69,0x35,0x53,0xA3,0xB4,0x6E,0x6A,0xD5,0x46,0x8C,0xC2,0x68,0x6B,0xB4,0x6B,0x36,0x19,0xC9,0x95,0x51,0x4A,0xD8,0x64,0x83,0xA9,0x72,0xB8,0x7D};


//this is setting all my variables
const int LButtonPin = 4;
const int RButtonPin = 5;
const int SwitchPin = 7;

volatile bool ButtonFlag;
volatile bool GameState;
volatile bool SwitchFlag;
volatile bool SwitchState;
volatile int CurrentLight;
volatile int Objective;
volatile int Score;
volatile int Highscore;
volatile int GameDelay;



void setup() {
  // this is seeding my random
  randomSeed(analogRead(A0));
  CircuitPlayground.begin();

  //these set my interrupts
  attachInterrupt(LButtonPin,scoringtime,RISING);
  attachInterrupt(RButtonPin,scoringtime,RISING);
  attachInterrupt(SwitchPin,switchflip,CHANGE);
}

void loop() {
  //this checks to make sure the button is pressed and a game isnt going
    if (ButtonFlag == 1 && GameState == 0){
     StartGame();
    }
  //this is the loop running the game
  // it checks to make sure a game has started
    if (GameState == 1){
  //this checks the game mode being played
     switch (SwitchState) {
        case 0:
            BaseGame();
            break;
      case 1:
            SpeedUp();
            break;
    }
  //these are the endgame/scoring conditions
  //first it checks to make sure you didnt win (hit 15)
    if (Score < 15) {
  //then it checks if you pressed the button at the right time
    //if you did your score goes up one and the game continues
    if (CurrentLight == Objective){
      ScoreUpdate();
      Speech();} 
    //if you didnt it make the game end on a loss
      else {
       EndGame();
      }
    } 
  //if you have more than 15 you win
    else {WinGame();}
      } 
  //this is to show what gamemode is selected outside the game loop
      else {
    // this sets the gamemode
       if (SwitchFlag == 1){
          SwitchState = !SwitchState;
          delay(50);
          SwitchFlag = 0;}
    //this sets the lights depending on the gamemode
        switch(SwitchState){
      //green for "easy"
          case 0:
              for (int i = 0; i>=0 && i <= 9; i++){
                CircuitPlayground.setPixelColor(i,0,255,0);
               }
               break;
      //red for "hard"/speeding up
          case 1:
            for (int i = 0; i>=0 && i <= 9; i++){
              CircuitPlayground.setPixelColor(i,255,0,0);
             }
              break;
         }
      }

  }

//this is the function that starts the game
void StartGame(){
  //this resets to the basic game delay so speed doesnt carry over
   GameDelay = 500;
  //this sets the game mode for the game you are about to play 
  if (SwitchFlag == 1){
    SwitchState = !SwitchState;
  }
  Score = 0;
  ButtonFlag = 0;
  //this is the trigger that the game is going
  GameState = 1;
}
//this is the loss function
void EndGame(){
  //this sets the game to stop
  GameState = 0;
  //this blinks red lights
  blink(255,0);
  //this speaks (less is as close to loss as the library had)
  CircuitPlayground.speaker.say(spLESS);

}
//this is the wwinning function
void WinGame(){
  //this ends the game
  GameState = 0;
  //this sets the lights to blink green
  blink(0,255);
  //this announces the win
	CircuitPlayground.speaker.say(spI_WIN);
}
//this is the function that increments the score
void ScoreUpdate(){
  //this sets all lights off
  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,0,0,0);
  }
  //this makes the score go up
  Score++;
  //this acts as a debounce
  ButtonFlag = 0;
}
//this is the basic speed of the game
void BaseGame(){
  //this selects the random light
  Objective = random (0,9);
  CircuitPlayground.setPixelColor(Objective,0,0,255);
  //this is the light bouncing back and forth
  for (int i = 0, x = 1; i >= 0 && i <= 9; i = i+x){
      if (i != Objective){
      CircuitPlayground.setPixelColor(i,255,0,0);}
      if (i != Objective+x && i >= 0){
      CircuitPlayground.setPixelColor(i-x,0,0,0);}
      delay(GameDelay);
    //this breaks out of the switchcase
    //also it sets the check for scoring
      if (ButtonFlag == 1){
        CurrentLight = i;
        ButtonFlag = 0;
        break;}
    //these turn the lights bouncing around
      if (i == 9){x = -1;}
      if (i == 0){x = 1;}


  }
}
//this is the speeding up version of the game
void SpeedUp(){
  //this selects the random light
  Objective = random (0,9);
  CircuitPlayground.setPixelColor(Objective,0,0,255);
  //this is the light bouncing back and forth
  for (int i = 0, x = 1; i >= 0 && i <= 9; i = i+x){
    //this sets how fast you go (speeds up with score)
    GameDelay = 500 - 25*Score;
    Serial.println(GameDelay);
      if (i != Objective){
      CircuitPlayground.setPixelColor(i,255,0,0);}
      if (i != Objective+x && i >= 0){
      CircuitPlayground.setPixelColor(i-x,0,0,0);}
      delay(GameDelay);
    //this breaks out of the switchcase
    //also it sets the check for scoring
      if (ButtonFlag == 1){
        CurrentLight = i;
        ButtonFlag = 0;
        break;}
      if (i == 9){x = -1;}
      if (i == 0){x = 1;}
     }
}

//this is what sets the button to see if its pressed
void scoringtime(){
  ButtonFlag = !ButtonFlag;
}
//this is the switch interrupt
void switchflip(){
  SwitchFlag = !SwitchFlag;
}
//this blinks the lights 5 times, and wants 2 inputs for red and green
void blink(int RED, int GREEN){

  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,0,0,0);
  }
  delay(100);
  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,RED,GREEN,0);
  }
    delay(100);
  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,0,0,0);
  }
  delay(100);
  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,RED,GREEN,0);
  }
    delay(100);
  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,0,0,0);
  }
  delay(100);
  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,RED,GREEN,0);
  }
    delay(100);
  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,0,0,0);
  }
  delay(100);
  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,RED,GREEN,0);
  }
    delay(100);
  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,0,0,0);
  }
  delay(100);
  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,RED,GREEN,0);
  }
  delay(100);
  for (int i = 0; i>=0 && i <= 9; i++){
    CircuitPlayground.setPixelColor(i,0,0,0);}
}
//this is the function that says the score as the game goes on
void Speech(){
  switch(Score){
    case 1:
    	CircuitPlayground.speaker.say(spONE);
      break;
    case 2:
      CircuitPlayground.speaker.say(spTWO);
      break;
    case 3:
      CircuitPlayground.speaker.say(spTHREE);
      break;
    case 4:
      CircuitPlayground.speaker.say(spFOUR);
      break;
    case 5:
      CircuitPlayground.speaker.say(spFIVE);
      break;
    case 6:
      CircuitPlayground.speaker.say(spSIX);
      break;
    case 7:
      CircuitPlayground.speaker.say(spSEVEN);
      break;
    case 8:
      CircuitPlayground.speaker.say(spEIGHT);
      break;
    case 9:
      CircuitPlayground.speaker.say(spNINE);
      break;
    case 10:
      CircuitPlayground.speaker.say(spTEN);
      break;
    case 11:
      CircuitPlayground.speaker.say(spELEVEN);
      break;
    case 12:
      CircuitPlayground.speaker.say(spTWELVE);
      break;
    case 13:
      CircuitPlayground.speaker.say(spTHIRTEEN);
      break;
    case 14:
      CircuitPlayground.speaker.say(spFOURTEEN);
      break;
    case 15:
      CircuitPlayground.speaker.say(spFIFTEEN);
      break;
  }
}